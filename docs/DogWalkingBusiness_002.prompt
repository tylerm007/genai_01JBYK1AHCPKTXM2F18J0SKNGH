Use SQLAlchemy to create a sqlite database named system/genai/temp/create_db_models.sqlite, to

Create a dog walking business

Role: Walker Use Case
A Dog Walker can self register (Walker.FirstName, Walker.LastName, Walker.PostalCode, Walker.Phone, Walker.Email) all required columns
Dog Walker can select days of week (Mon, Tues, Wed, Thurs, Fri, Sat, Sun)  and times they are available (morning, afternoon) 
The Dog walker can set the maximum number of dogs per Walk.
Walker can set the price for a walk (range $10 to max $50) based on Dog.Size [small, medium, large]
Walker can see the request for Walk and reject or confirm the invitation
Owner is emailed confirmation from Walker 
Walker can see all Walk requests that match their availability and dog size

Role: Owner Use Case
Dog Owner can self register (Owner.Name, Owner, Address, Owner.Phone, Owner.Email) all required columns
Owner can add one or more dogs (Dog.Name, Dog.Breed, Dog,Size [small, medium, large], Dog.Notes) 
Owner can request a walk for one or more registered pets selecting Dog and matching available walker (day of week and time)
Owners can only see their own records (Owner) and their own pets ( Dogs)
Owners can see their historical WalkSchedule
Owners can review the Walker after the Walk

Payments Use Case
Owner enters payment using 3rd party billing once the walk is completed.
Payment is paid to Walker for Walk of one or more Dogs

Role: Administration Use Case
The Business Administrator can see all Walkers, Owners. And Payments records


Add CreatedDate, UpdatedDate, and CreatedBy to every table

.

Hints: use autonum keys (for all tables - including for link/join/junction/intersection tables), allow nulls, foreign keys, no check constraints.

Be sure to create classes, never tables.

If you create sum, count or formula Logic Bank rules, then you MUST create a corresponding column in the data model.

Remember that SQLite DateTime type only accepts Python datetime and date objects as input, 
this means you can not enter string attributes where a date or datetime object is expected.

Don't install additional packages.
Don't use the faker pip package.

Create multiple rows of test data for each table, and follow these guidelines carefully:
* Use foreign key columns instead of relationship names for the data.  
* Create separate objects for each test data row, not in arrays. 
* Be sure to initialize derived attributes for test data rows - including all sums and counts, but do not rely on Logic Bank,
and do not generate db.execute statements.
* Do not create arrays of test data.
* Do not create a function to load test data.  
* Do not print the test data. 
* For test data, format dates as date(year, month, day).

For each data model class, create a docstring describing the table, prefixed with 'description: '. 

class WGResult(BaseModel):  # must match system/genai/prompt_inserts/response_format.prompt

    models : List[Model] # list of sqlalchemy classes in the response

    rules : List[Rule] # list rule declarations

    test_data: str

    name: str  # suggest a short name for the project



Format the response as a WGResult.